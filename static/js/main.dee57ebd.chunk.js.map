{"version":3,"sources":["components/shapes/GoodShape.js","components/Good/Good.js","components/GoodList/GoodList.js","components/shapes/GoodListShape.js","App.js","index.js"],"names":["GoodShape","name","PropTypes","string","isRequired","id","number","Good","good","selectedGoods","toggleGood","goodClasses","ClassNames","includes","className","type","onClick","GoodList","arrayOf","shape","func","goods","map","key","preparedGoods","App","state","event","goodName","target","previousElementSibling","textContent","buttonName","updatedSelectedGoods","push","splice","indexOf","setState","clearSelected","this","join","React","Component","ReactDOM","render","document","getElementById"],"mappings":"0WAEaA,EAAY,CACvBC,KAAMC,IAAUC,OAAOC,WACvBC,GAAIH,IAAUI,OAAOF,YCGVG,EAAO,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,cAAeC,EAAiB,EAAjBA,WAClCT,EAASO,EAATP,KAEFU,EAAcC,IAAW,CAC7BJ,MAAM,EACN,iBAAkBC,EAAcI,SAASZ,KAG3C,OACE,yBAAKa,UAAWH,GACd,2BAAIV,GACJ,4BACEc,KAAK,SACLD,UAAU,sBACVE,QAASN,GAERC,EAAYE,SAAS,kBAAoB,SAAW,YChBhDI,GCHJf,IAAUgB,QAAQhB,IAAUiB,MAAMnB,IAAYI,WACtCF,IAAUkB,KAAKhB,WAClBF,IAAUkB,KAAKhB,WDCL,SAAC,GAAD,IAAGiB,EAAH,EAAGA,MAAOZ,EAAV,EAAUA,cAAeC,EAAzB,EAAyBA,WAAzB,OACtB,yBAAKI,UAAU,aACZO,EAAMC,KAAI,SAAAd,GAAI,OACb,kBAAC,EAAD,CACEA,KAAMA,EACNC,cAAeA,EACfC,WAAYA,EACZa,IAAKf,EAAKH,WEIZmB,EAbkB,CACtB,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGoCF,KAAI,SAACd,EAAMH,GAAP,MAAe,CACvDJ,KAAMO,EACNH,SA0DaoB,E,4MAtDbC,MAAQ,CACNjB,cAAe,I,EAGjBC,WAAa,SAACiB,GACZ,IAAMC,EAAWD,EAAME,OAAOC,uBAAuBC,YAC/CC,EAAaL,EAAME,OAAOE,YACxBtB,EAAkB,EAAKiB,MAAvBjB,cACFwB,EAAoB,YAAOxB,GAEd,WAAfuB,EACGC,EAAqBpB,SAASe,IACjCK,EAAqBC,KAAKN,GAG5BK,EAAqBE,OAAOF,EAAqBG,QAAQR,GAAW,GAGtE,EAAKS,SAAS,CACZ5B,cAAc,YAAKwB,M,EAIvBK,cAAgB,WACd,EAAKD,SAAS,CACZ5B,cAAe,M,uDAIT,IACAA,EAAkB8B,KAAKb,MAAvBjB,cAER,OACE,yBAAKK,UAAU,OACb,wBAAIA,UAAU,eAAd,2BACuBL,EAAc+B,KAAK,QAE1C,4BACEzB,KAAK,SACLD,UAAU,qBACVE,QAASuB,KAAKD,eAHhB,KAOA,kBAAC,EAAD,CACEjB,MAAOG,EACPf,cAAeA,EACfC,WAAY6B,KAAK7B,kB,GAhDT+B,IAAMC,WCnBxBC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.dee57ebd.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nexport const GoodShape = {\n  name: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport ClassNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport './Good.scss';\n\nimport { GoodShape } from '../shapes/GoodShape';\n\nexport const Good = ({ good, selectedGoods, toggleGood }) => {\n  const { name } = good;\n\n  const goodClasses = ClassNames({\n    good: true,\n    'good--selected': selectedGoods.includes(name),\n  });\n\n  return (\n    <div className={goodClasses}>\n      <p>{name}</p>\n      <button\n        type=\"button\"\n        className=\"good__button button\"\n        onClick={toggleGood}\n      >\n        {goodClasses.includes('good--selected') ? 'Remove' : 'Select'}\n      </button>\n    </div>\n  );\n};\n\nGood.propTypes = PropTypes.shape(GoodShape).isRequired;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './GoodList.scss';\n\nimport { Good } from '../Good';\nimport { GoodListShape } from '../shapes/GoodListShape';\n\nexport const GoodList = ({ goods, selectedGoods, toggleGood }) => (\n  <div className=\"good-list\">\n    {goods.map(good => (\n      <Good\n        good={good}\n        selectedGoods={selectedGoods}\n        toggleGood={toggleGood}\n        key={good.id}\n      />\n    ))}\n  </div>\n);\n\nGoodList.propTypes = PropTypes.shape(GoodListShape).isRequired;\n","import PropTypes from 'prop-types';\nimport { GoodShape } from './GoodShape';\n\nexport const GoodListShape = {\n  goods: PropTypes.arrayOf(PropTypes.shape(GoodShape)).isRequired,\n  selectedGoods: PropTypes.func.isRequired,\n  toggleGood: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\n\nimport { GoodList } from './components/GoodList';\n\nconst goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst preparedGoods = goodsFromServer.map((good, id) => ({\n  name: good,\n  id,\n}));\n\nclass App extends React.Component {\n  state = {\n    selectedGoods: [],\n  }\n\n  toggleGood = (event) => {\n    const goodName = event.target.previousElementSibling.textContent;\n    const buttonName = event.target.textContent;\n    const { selectedGoods } = this.state;\n    const updatedSelectedGoods = [...selectedGoods];\n\n    if (buttonName === 'Select') {\n      if (!updatedSelectedGoods.includes(goodName)) {\n        updatedSelectedGoods.push(goodName);\n      }\n    } else {\n      updatedSelectedGoods.splice(updatedSelectedGoods.indexOf(goodName), 1);\n    }\n\n    this.setState({\n      selectedGoods: [...updatedSelectedGoods],\n    });\n  };\n\n  clearSelected = () => {\n    this.setState({\n      selectedGoods: [],\n    });\n  };\n\n  render() {\n    const { selectedGoods } = this.state;\n\n    return (\n      <div className=\"app\">\n        <h1 className=\"app__header\">\n          {`Selected good: - ${selectedGoods.join(', ')}`}\n        </h1>\n        <button\n          type=\"button\"\n          className=\"app__button button\"\n          onClick={this.clearSelected}\n        >\n          X\n        </button>\n        <GoodList\n          goods={preparedGoods}\n          selectedGoods={selectedGoods}\n          toggleGood={this.toggleGood}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}